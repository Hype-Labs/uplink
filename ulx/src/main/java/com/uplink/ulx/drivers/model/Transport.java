package com.uplink.ulx.drivers.model;

/**
 * A Transport is an aggregation of reliable and unreliable (unsupported)
 * channels, thus constituting the ways in which a given device is known to
 * be capable of communicating. This, the Transport is an umbrella abstraction
 * that aggregates all of the link's I/O capabilities. By itself, the Transport
 * abstraction doesn't really do much, and instead it is the Channels who
 * (through the streams) perform all I/O.
 */
public interface Transport {

    /**
     * This is an identifier that is either randomly generated by the host
     * device or equal to the corresponding Device's network identifier. This
     * is useful mostly for logging purposes, since Transports don't have any
     * businesses crossing the JNI bridge.
     * @return The Transport's identifier.
     */
    String getIdentifier();

    /**
     * The Transport's transport type corresponds to the type of transport (e.g.
     * Bluetooth Low Energy) over which the Transport is capable of operating,
     * and thus perform I/O.
     * @return The Transport's transport type.
     */
    int getTransportType();

    /**
     * A reliable channel is one for which the implementation performs low-level
     * acknowledgements and other verifications, such as data integrity, order,
     * and so on. Reliable channels can be comparable to TCP, while unreliable
     * (unsupported) ones are often compared to UDP. The Channel aggregates the
     * Transport's streams, meaning this returns the unit that is capable of
     * performing reliable I/O.
     * @return The Transport's reliable Channel.
     */
    Channel getReliableChannel();
}
